{"version":3,"sources":["lib/index.js","lib/mpeg-encoder.js","index.js"],"names":["AudioContext","window","webkitAudioContext","createWorker","fn","js","toString","replace","blob","Blob","Worker","URL","createObjectURL","error","method","event","Event","data","Error","context","processor","MediaRecorder","stream","state","em","document","createDocumentFragment","encoder","recorder","addEventListener","e","type","mimeType","dispatchEvent","prototype","start","timeslice","clone","input","createMediaStreamSource","createScriptProcessor","onaudioprocess","postMessage","inputBuffer","getChannelData","connect","destination","slicing","setInterval","requestData","undefined","stop","getTracks","forEach","track","clearInterval","pause","resume","sampleRate","apply","arguments","removeEventListener","isTypeSupported","notSupported","navigator","mediaDevices","require","module","exports","importScripts","CHANNELS","KBPS","SAMPLE_RATE","lamejs","Mp3Encoder","recorded","Int8Array","concat","a","b","length","c","set","encode","buffer","i","buf","encodeBuffer","dump","flush","onmessage","recordButton","querySelector","stopButton","audio","playButton","getUserMedia","then","src","play"],"mappings":"AEAA,AFAA,ACAAmE,ICAIvC,AFAA5B,ECAE,CAACoE,KCAP,EDAA,EDAgB,CCAC,EDAEnE,MAAM,CAACD,GCAG,SDAV,IAAuBC,MAAM,CAACC,kBAAjD;AECA,ADAEmE,EAAAA,ECAEsB,WDAW,CCAC,ADCZ,GCDelE,QAAQ,CAACmE,aAAT,CAAuB,eAAvB,CAAnB,uBDAe,CAAb;ACCF,AFAA,ACGE,ICHEC,EDGEvB,GDHGnE,KEAK,ADGA,GCHGsB,ADGA,CAAf,GDHF,CAAuBrB,EAAvB,CEAyB,CAACwF,AFAC,aEAV,CAAuB,aAAvB,CAAjB;AACA,AFAE,ACGA,ICHEE,EFAEzF,ACGAkE,EDHE,CEAC,CDGC,CDHCnE,CEACqB,CFAC,ACGA,CDFRnB,ECEH,ICHkB,CAACsF,CFAV,GAENrF,OAFM,CAEE,CEFD,CAAuB,QAAvB,CAAZ,WFAW,EAE0B,EAF1B,EAGNA,OAHM,CAGE,IAHF,EAGQ,EAHR,CAAT;AECF,AFGE,ACAA,ICHEwF,EFGEvF,ACAAgE,IDAI,GAAG,CEHC,GAAG/C,AFGAhB,ACAA,GAAG,CDAP,CAAS,CAACJ,EEHE,AFGH,ACApB,CCHwBuF,AFGb,CAAX,YEHe,CAAuB,aAAvB,CAAjB;AAEA3F,AFEE,ACCA,MCHI,ADGA0B,CCHCN,EFEE,IAAIX,ACCA,GAAG,GDDP,CEFT,AFEoBC,ACCA8D,GCHGP,AFEA,CAACtD,ECCE,CAAC8D,GCHG,CAAC,MDGf,CAAsBJ,CDDlB,CAAoB9D,IEFV,AFEV,CEFpB,AFES,CAAP,ACCc,EAAgCgE,WAAhC,EAA6CD,IAA7C,CAAd;ACFFtE,AFEC,ACCC,MCHI,ADGA0E,CCHCtD,ODGO,GAAG,GCHjB,CAAqBM,ADGAiD,OCHrB,EDGiB,CCHcV,CDG7B,MCHoC,CAAC,oBAAD,CAAtC;AACAjE,MAAM,CAACoB,aAAP,CAAqBa,SAArB,CAA+BF,QAA/B,GAA0C,YAA1C;AAEA2D,AFCA,ACCE,SDDO9E,ECCEgE,CCFC,CAAChD,CFCb,CAAgBf,ECCd,CAAiBgE,CAAjB,EDDF,ACCsBC,CAApB,CDDsB,CCCC,KCFzB,CAA8B,OAA9B,EAAuC,YAAM;AAC3C,AF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","file":"webm-test.e31bb0bc.js","sourceRoot":"..","sourcesContent":["var AudioContext = window.AudioContext || window.webkitAudioContext\n\nfunction createWorker (fn) {\n  var js = fn\n    .toString()\n    .replace(/^function\\s*\\(\\)\\s*{/, '')\n    .replace(/}$/, '')\n  var blob = new Blob([js])\n  return new Worker(URL.createObjectURL(blob))\n}\n\nfunction error (method) {\n  var event = new Event('error')\n  event.data = new Error('Wrong state for ' + method)\n  return event\n}\n\nvar context, processor\n\n/**\n * Audio Recorder with MediaRecorder API.\n *\n * @param {MediaStream} stream The audio stream to record.\n *\n * @example\n * navigator.mediaDevices.getUserMedia({ audio: true }).then(function (stream) {\n *   var recorder = new MediaRecorder(stream)\n * })\n *\n * @class\n */\nfunction MediaRecorder (stream) {\n  /**\n   * The `MediaStream` passed into the constructor.\n   * @type {MediaStream}\n   */\n  this.stream = stream\n\n  /**\n   * The current state of recording process.\n   * @type {\"inactive\"|\"recording\"|\"paused\"}\n   */\n  this.state = 'inactive'\n\n  this.em = document.createDocumentFragment()\n  this.encoder = createWorker(MediaRecorder.encoder)\n\n  var recorder = this\n  this.encoder.addEventListener('message', function (e) {\n    var event = new Event('dataavailable')\n    event.data = new Blob([e.data], { type: recorder.mimeType })\n    recorder.em.dispatchEvent(event)\n    if (recorder.state === 'inactive') {\n      recorder.em.dispatchEvent(new Event('stop'))\n    }\n  })\n}\n\nMediaRecorder.prototype = {\n  /**\n   * The MIME type that is being used for recording.\n   * @type {string}\n   */\n  mimeType: 'audio/wav',\n\n  /**\n   * Begins recording media.\n   *\n   * @param {number} [timeslice] The milliseconds to record into each `Blob`.\n   *                             If this parameter isn’t included, single `Blob`\n   *                             will be recorded.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * recordButton.addEventListener('click', function () {\n   *   recorder.start()\n   * })\n   */\n  start: function start (timeslice) {\n    if (this.state !== 'inactive') {\n      return this.em.dispatchEvent(error('start'))\n    }\n\n    this.state = 'recording'\n\n    if (!context) {\n      context = new AudioContext()\n    }\n    this.clone = this.stream.clone()\n    var input = context.createMediaStreamSource(this.clone)\n\n    if (!processor) {\n      processor = context.createScriptProcessor(2048, 1, 1)\n    }\n\n    var recorder = this\n    processor.onaudioprocess = function (e) {\n      if (recorder.state === 'recording') {\n        recorder.encoder.postMessage([\n          'encode', e.inputBuffer.getChannelData(0)\n        ])\n      }\n    }\n\n    input.connect(processor)\n    processor.connect(context.destination)\n\n    this.em.dispatchEvent(new Event('start'))\n\n    if (timeslice) {\n      this.slicing = setInterval(function () {\n        if (recorder.state === 'recording') recorder.requestData()\n      }, timeslice)\n    }\n\n    return undefined\n  },\n\n  /**\n   * Stop media capture and raise `dataavailable` event with recorded data.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * finishButton.addEventListener('click', function () {\n   *   recorder.stop()\n   * })\n   */\n  stop: function stop () {\n    if (this.state === 'inactive') {\n      return this.em.dispatchEvent(error('stop'))\n    }\n\n    this.requestData()\n    this.state = 'inactive'\n    this.clone.getTracks().forEach(function (track) {\n      track.stop()\n    })\n    return clearInterval(this.slicing)\n  },\n\n  /**\n   * Pauses recording of media streams.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * pauseButton.addEventListener('click', function () {\n   *   recorder.pause()\n   * })\n   */\n  pause: function pause () {\n    if (this.state !== 'recording') {\n      return this.em.dispatchEvent(error('pause'))\n    }\n\n    this.state = 'paused'\n    return this.em.dispatchEvent(new Event('pause'))\n  },\n\n  /**\n   * Resumes media recording when it has been previously paused.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * resumeButton.addEventListener('click', function () {\n   *   recorder.resume()\n   * })\n   */\n  resume: function resume () {\n    if (this.state !== 'paused') {\n      return this.em.dispatchEvent(error('resume'))\n    }\n\n    this.state = 'recording'\n    return this.em.dispatchEvent(new Event('resume'))\n  },\n\n  /**\n   * Raise a `dataavailable` event containing the captured media.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * this.on('nextData', function () {\n   *   recorder.requestData()\n   * })\n   */\n  requestData: function requestData () {\n    if (this.state === 'inactive') {\n      return this.em.dispatchEvent(error('requestData'))\n    }\n\n    return this.encoder.postMessage(['dump', context.sampleRate])\n  },\n\n  /**\n   * Add listener for specified event type.\n   *\n   * @param {\"start\"|\"stop\"|\"pause\"|\"resume\"|\"dataavailable\"|\"error\"}\n   * type Event type.\n   * @param {function} listener The listener function.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * recorder.addEventListener('dataavailable', function (e) {\n   *   audio.src = URL.createObjectURL(e.data)\n   * })\n   */\n  addEventListener: function addEventListener () {\n    this.em.addEventListener.apply(this.em, arguments)\n  },\n\n  /**\n   * Remove event listener.\n   *\n   * @param {\"start\"|\"stop\"|\"pause\"|\"resume\"|\"dataavailable\"|\"error\"}\n   * type Event type.\n   * @param {function} listener The same function used in `addEventListener`.\n   *\n   * @return {undefined}\n   */\n  removeEventListener: function removeEventListener () {\n    this.em.removeEventListener.apply(this.em, arguments)\n  },\n\n  /**\n   * Calls each of the listeners registered for a given event.\n   *\n   * @param {Event} event The event object.\n   *\n   * @return {boolean} Is event was no canceled by any listener.\n   */\n  dispatchEvent: function dispatchEvent () {\n    this.em.dispatchEvent.apply(this.em, arguments)\n  }\n}\n\n/**\n * Returns `true` if the MIME type specified is one the polyfill can record.\n *\n * This polyfill supports `audio/wav` and `audio/mpeg`.\n *\n * @param {string} mimeType The mimeType to check.\n *\n * @return {boolean} `true` on `audio/wav` and `audio/mpeg` MIME type.\n */\nMediaRecorder.isTypeSupported = function isTypeSupported (mimeType) {\n  return MediaRecorder.prototype.mimeType === mimeType\n}\n\n/**\n * `true` if MediaRecorder can not be polyfilled in the current browser.\n * @type {boolean}\n *\n * @example\n * if (MediaRecorder.notSupported) {\n *   showWarning('Audio recording is not supported in this browser')\n * }\n */\nMediaRecorder.notSupported = !navigator.mediaDevices || !AudioContext\n\n/**\n * Converts RAW audio buffer to compressed audio files.\n * It will be loaded to Web Worker.\n * By default, WAVE encoder will be used.\n * @type {function}\n *\n * @example\n * MediaRecorder.prototype.mimeType = 'audio/ogg'\n * MediaRecorder.encoder = oggEncoder\n */\nMediaRecorder.encoder = require('./wave-encoder')\n\nmodule.exports = MediaRecorder\n","module.exports = function () {\n  importScripts(\n    'https://cdnjs.cloudflare.com/ajax/libs/lamejs/1.2.0/lame.min.js'\n  )\n\n  var CHANNELS = 1\n  var KBPS = 128\n  var SAMPLE_RATE = 44100\n\n  var encoder = new lamejs.Mp3Encoder(CHANNELS, SAMPLE_RATE, KBPS)\n  var recorded = new Int8Array()\n\n  function concat (a, b) {\n    if (b.length === 0) {\n      return a\n    }\n    var c = new Int8Array(a.length + b.length)\n    c.set(a)\n    c.set(b, a.length)\n    return c\n  }\n\n  function encode (buffer) {\n    for (var i = 0; i < buffer.length; i++) {\n      buffer[i] = buffer[i] * 32767.5\n    }\n\n    var buf = encoder.encodeBuffer(buffer)\n    recorded = concat(recorded, buf)\n  }\n\n  function dump () {\n    var buf = encoder.flush()\n    recorded = concat(recorded, buf)\n    var buffer = recorded.buffer\n    recorded = new Int8Array()\n    postMessage(buffer, [buffer])\n  }\n\n  onmessage = function (e) {\n    if (e.data[0] === 'encode') {\n      encode(e.data[1])\n    } else {\n      dump(e.data[1])\n    }\n  }\n}\n","let recorder\r\nlet recordButton = document.querySelector('#recordButton');\r\nlet stopButton = document.querySelector('#stopButton');\r\nlet audio = document.querySelector('#audio');\r\nlet playButton = document.querySelector('#playButton');\r\n\r\nwindow.MediaRecorder = require('./lib/index');\r\nwindow.MediaRecorder.encoder = require('./lib/mpeg-encoder');\r\nwindow.MediaRecorder.prototype.mimeType = 'audio/mpeg'\r\n\r\nrecordButton.addEventListener('click', () => {\r\n  // Request permissions to record audio\r\n  navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\r\n    recorder = new MediaRecorder(stream)\r\n\r\n    // Set record to <audio> when recording will be finished\r\n    recorder.addEventListener('dataavailable', e => {\r\n      audio.src = URL.createObjectURL(e.data)\r\n    })\r\n\r\n    // Start recording\r\n    recorder.start();\r\n  })\r\n})\r\n\r\nstopButton.addEventListener('click', () => {\r\n  // Stop recording\r\n  recorder.stop()\r\n  // Remove “recording” icon from browser tab\r\n  recorder.stream.getTracks().forEach(i => i.stop())\r\n})\r\n\r\nplayButton.addEventListener('click', () => {\r\n  audio.play();\r\n})\r\n\r\n"]}